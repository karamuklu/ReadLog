//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoaMailService
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SmtpDeliveryMethod", Namespace="http://schemas.datacontract.org/2004/07/System.Net.Mail")]
    public enum SmtpDeliveryMethod : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Network = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedPickupDirectory = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PickupDirectoryFromIis = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MailPriority", Namespace="http://schemas.datacontract.org/2004/07/System.Net.Mail")]
    public enum MailPriority : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SoaMailService.IMailService")]
    public interface IMailService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/MailGonder", ReplyAction="http://tempuri.org/IMailService/MailGonderResponse")]
        System.Threading.Tasks.Task MailGonderAsync(string takmaAd, SoaMailService.SmtpDeliveryMethod smtpDeliveryMethod, bool useDefaultCredentials, bool enableSsl, string mailKonu, bool isBodyHtml, SoaMailService.MailPriority mailPriority, string icerik, string[] kime, string bilgiMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/MailYolla", ReplyAction="http://tempuri.org/IMailService/MailYollaResponse")]
        System.Threading.Tasks.Task MailYollaAsync(string mailKonu, string[] kime, string bilgiMail, bool isBodyHtml, string icerik, SoaMailService.MailPriority mailPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/MailYollaTest", ReplyAction="http://tempuri.org/IMailService/MailYollaTestResponse")]
        System.Threading.Tasks.Task MailYollaTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailService/MailGonderAttachment", ReplyAction="http://tempuri.org/IMailService/MailGonderAttachmentResponse")]
        System.Threading.Tasks.Task MailGonderAttachmentAsync(string takmaAd, SoaMailService.SmtpDeliveryMethod smtpDeliveryMethod, bool useDefaultCredentials, bool enableSsl, string mailKonu, bool isBodyHtml, SoaMailService.MailPriority mailPriority, string icerik, string kime, string bilgiMail, string[] dosyaYolu, string mailYollayan);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IMailServiceChannel : SoaMailService.IMailService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class MailServiceClient : System.ServiceModel.ClientBase<SoaMailService.IMailService>, SoaMailService.IMailService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MailServiceClient() : 
                base(MailServiceClient.GetDefaultBinding(), MailServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMailService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MailServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MailServiceClient.GetBindingForEndpoint(endpointConfiguration), MailServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MailServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MailServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MailServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MailServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MailServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task MailGonderAsync(string takmaAd, SoaMailService.SmtpDeliveryMethod smtpDeliveryMethod, bool useDefaultCredentials, bool enableSsl, string mailKonu, bool isBodyHtml, SoaMailService.MailPriority mailPriority, string icerik, string[] kime, string bilgiMail)
        {
            return base.Channel.MailGonderAsync(takmaAd, smtpDeliveryMethod, useDefaultCredentials, enableSsl, mailKonu, isBodyHtml, mailPriority, icerik, kime, bilgiMail);
        }
        
        public System.Threading.Tasks.Task MailYollaAsync(string mailKonu, string[] kime, string bilgiMail, bool isBodyHtml, string icerik, SoaMailService.MailPriority mailPriority)
        {
            return base.Channel.MailYollaAsync(mailKonu, kime, bilgiMail, isBodyHtml, icerik, mailPriority);
        }
        
        public System.Threading.Tasks.Task MailYollaTestAsync()
        {
            return base.Channel.MailYollaTestAsync();
        }
        
        public System.Threading.Tasks.Task MailGonderAttachmentAsync(string takmaAd, SoaMailService.SmtpDeliveryMethod smtpDeliveryMethod, bool useDefaultCredentials, bool enableSsl, string mailKonu, bool isBodyHtml, SoaMailService.MailPriority mailPriority, string icerik, string kime, string bilgiMail, string[] dosyaYolu, string mailYollayan)
        {
            return base.Channel.MailGonderAttachmentAsync(takmaAd, smtpDeliveryMethod, useDefaultCredentials, enableSsl, mailKonu, isBodyHtml, mailPriority, icerik, kime, bilgiMail, dosyaYolu, mailYollayan);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMailService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMailService))
            {
                return new System.ServiceModel.EndpointAddress("http://soa.yildiz.com/MailService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MailServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMailService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MailServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMailService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMailService,
        }
    }
}
